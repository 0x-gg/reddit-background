#!/usr/bin/env python
"""
NAME

    reddit-background

SYNOPSIS

    reddit-backgrounds [--desktop <DESKTOP>] [-h --help] [SUBREDDITS]

DESCRIPTION

    Set Mac OS X desktop backgrounds to images from pulled from Reddit.

EXAMPLES

    reddit-backgrounds CarPorn:top:10:week {seasonal} EarthPorn:new

AUTHOR

    Rick Harris <rconradharris@gmail.com>
"""
import ConfigParser
import argparse
import collections
import datetime
import json
import os
import random
import re
import shutil
import socket
import subprocess
import sys
import urllib2
import urlparse
import uuid


DEFAULT_SUBREDDIT_TOKENS = ['{seasonal}']
CONFIG_PATH = "~/.reddit-background.conf"
DOWNLOAD_DIRECTORY = "~/.background-images"
RE_RESOLUTION_IN_TITLE = re.compile(".*\[\s*(\d+)\s*[xX]\s*(\d+)\s*\].*")
RE_RESOLUTION_DISPLAYS = "Resolution: (\d+)\sx\s(\d+)"
IMAGE_EXTENSIONS = set(['jpg', 'jpeg', 'png'])

VERBOSE = False


class URLOpenError(Exception):
    pass


def set_verbose(verbose):
    global VERBOSE
    VERBOSE = verbose


def log(msg):
    if VERBOSE:
        print >> sys.stderr, msg


def _run_apple_script(script):
    return subprocess.check_output(['osascript', '-e', script])


def _set_desktop_background(idx, filename):
    log('Setting background for desktop {0}'.format(idx))
    script = 'tell application "System Events" to set picture of item'\
             ' {idx} of (a reference to every desktop) to "{filename}"'\
             .format(idx=idx, filename=filename)
    return _run_apple_script(script)


def _parse_min_resolution(min_resolution):
    if not min_resolution:
        return None
    return map(int, min_resolution.split('x'))


class Desktop(object):
    def __init__(self, num, min_resolution=None, subreddit_tokens=None,
                 image_urls=None):
        self.num = num
        self.min_resolution = min_resolution
        self.subreddit_tokens = subreddit_tokens or []
        self.image_urls = image_urls or []

    def _get_subreddits(self):
        return [Subreddit.create_from_token(self, t)
                for t in self.subreddit_tokens]

    def _get_image_urls_from_subreddits(self):
        # Accumulate images URLs across subreddits
        image_urls = []
        for subreddit in self._get_subreddits():
            try:
                urls = subreddit.fetch_image_urls()
            except URLOpenError:
                log("Error fetching URLS from subreddit '{0}',"
                    " skipping...".format(subreddit.name))
            else:
                image_urls.extend(urls)
            return image_urls

    def set_background(self):
        log("Min resolution: {}".format('x'.join(self.min_resolution)))
        if self.image_urls:
            image_urls = self.image_urls
        else:
            image_urls = self._get_image_urls_from_subreddits()
            log('Total candidate images across subreddits: {0}'.format(len(image_urls)))

        random.shuffle(image_urls)

        filename = None
        for image_url in image_urls:
            try:
                filename = _download_image(image_url)
                break
            except URLOpenError:
                continue  # Try next image...

        if filename:
            _set_desktop_background(self.num, filename)


def _get_desktops_with_defaults():
    """Desktop objects populated with sensible defaults.

    Customizations will be performed by overriding these values, first using
    the config file and later command-line options.
    """
    p = subprocess.Popen(["system_profiler", "SPDisplaysDataType"],
                         stdout=subprocess.PIPE)
    (output, err) = p.communicate()
    matches = re.findall(RE_RESOLUTION_DISPLAYS, output)
    desktops = []
    for num, res in enumerate(matches, start=1):
        desktop = Desktop(num,
                          min_resolution=(res[0], res[1]),
                          subreddit_tokens=DEFAULT_SUBREDDIT_TOKENS)
        desktops.append(desktop)
    return desktops


def _urlopen(url):
    user_agent = "Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11"
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', user_agent)]
    try:
        return opener.open(url)
    except (socket.error,
            urllib2.HTTPError,
            urllib2.URLError):
        raise URLOpenError


def _get_extension_from_url(url):
    url_path = urlparse.urlparse(url).path
    parts = url_path.rsplit('.', 1)
    try:
        return parts[1]
    except IndexError:
        return None


def _download_image(image_url):
    dirname = os.path.expanduser(DOWNLOAD_DIRECTORY)

    ext = _get_extension_from_url(image_url)
    assert ext, "No extension found for image!"

    basename = '.'.join([str(uuid.uuid4()), ext])
    filename = os.path.join(dirname, basename)

    log('Downloading {0} to {1}'.format(image_url, filename))
    response = _urlopen(image_url)
    try:
        with open(filename, 'w') as f:
            f.write(response.read())
    finally:
        response.close()

    return filename


def _clear_download_directory():
    dirname = os.path.expanduser(DOWNLOAD_DIRECTORY)
    if os.path.exists(dirname):
        shutil.rmtree(dirname)
    os.makedirs(dirname)


def _get_northern_hemisphere_season():
    """Source: http://stackoverflow.com/questions/16139306/determine-season-given-timestamp-in-python-using-datetime"""
    day = datetime.date.today().timetuple().tm_yday
    spring = range(80, 172)
    summer = range(172, 264)
    autumn = range(264, 355)
    if day in spring:
        return 'spring'
    elif day in summer:
        return 'summer'
    elif day in autumn:
        return 'autumn'
    else:
        return 'winter'


class Post(object):
    def __init__(self, subreddit, title, url):
        self.subreddit = subreddit
        self.title = title
        self.url = url

    def get_image_resolution(self):
        match = RE_RESOLUTION_IN_TITLE.match(self.title)
        if not match:
            return (None, None)
        resolution_x = int(match.group(1))
        resolution_y = int(match.group(2))
        return resolution_x, resolution_y

    def fetch_image_url(self):
        url = self.url

        ext = _get_extension_from_url(url)

        if ext in IMAGE_EXTENSIONS:
            return url
        elif 'imgur.com' in url:
            return '{0}.jpg'.format(url)
        else:
            return None


class Subreddit(object):
    def __init__(self, desktop, name, sort='top', limit=25, timeframe='week'):
        self.desktop = desktop
        self.name = name
        self.sort = sort
        self.limit = limit
        self.timeframe = timeframe

    def _fetch_posts(self):
        url = 'http://reddit.com/r/{subreddit}/{sort}.json?t={timeframe}&limit={limit}'
        url = url.format(subreddit=self.name,
                         sort=self.sort,
                         timeframe=self.timeframe,
                         limit=self.limit)

        response = _urlopen(url)

        try:
            data = json.loads(response.read())
        finally:
            response.close()

        posts = []
        for child in data['data']['children']:
            data = child['data']
            post = Post(self, data['title'], data['url'])
            posts.append(post)

        return posts

    def fetch_image_urls(self):
        min_x, min_y = self.desktop.min_resolution
        posts = self._fetch_posts()
        image_urls = []
        for post in posts:
            image_url = post.fetch_image_url()
            if not image_url:
                continue

            # Check minimum resolution criteria
            res_x, res_y = post.get_image_resolution()
            if res_x is not None and res_y is not None:
                if res_x >= min_x and res_y >= min_y:
                    image_urls.append(image_url)
                else:
                    log("Rejecting {} with resolution {}x{}".format(
                        image_url, res_x, res_y))
            else:
                log("Rejecting {} with no resolution information".format(
                    image_url))

        log('Found {0} candidate images from {1}'.format(len(image_urls),
                                                         self.name))
        return image_urls

    @classmethod
    def create_from_token(cls, desktop, token):
        token_parts = token.split(':')

        name = token_parts[0]

        if name == '{seasonal}':
            token_parts[0] = '%sporn' % _get_northern_hemisphere_season()

        args = ('name', 'sort', 'limit', 'timeframe')
        ddict = {}
        for arg, value in zip(args, token_parts):
            ddict[arg] = value
        return cls(desktop, **ddict)

    def __repr__(self):
        return '<Subreddit r/{0}>'.format(self.name)


def _read_config_file(desktops):
    path = os.path.expanduser(CONFIG_PATH)

    if not os.path.exists(path):
        return

    def parse_subreddit_tokens(desktop, section):
        tokens = map(lambda x: x.strip(),
                     config.get(section, 'subreddits').split(','))
        if tokens:
            desktop.subreddit_tokens = tokens

    def parse_min_resolution(desktop, section):
        try:
            min_resolution = config.get(section, 'min_resolution')
        except ConfigParser.NoOptionError:
            pass
        else:
            min_resolution = _parse_min_resolution(min_resolution)
            if min_resolution:
                desktop.min_resolution = min_resolution

    config = ConfigParser.ConfigParser()
    with open(path) as f:
        config.readfp(f)

    for desktop in desktops:
        section = 'desktop{0}'.format(desktop.num)
        if section not in config.sections():
            section = 'default'
        parse_subreddit_tokens(desktop, section)
        parse_min_resolution(desktop, section)


def _handle_cli_options(desktops):
    parser = argparse.ArgumentParser(
        description='Set desktop background image from reddit')
    parser.add_argument('subreddits', metavar='SUBREDDITS', nargs='*',
            help='A list of subreddits')
    parser.add_argument('--desktop', type=int, default=0,
            help='Only set background for this desktop'
                 ' (default: Set all desktops)')
    parser.add_argument('--min-resolution',
            help='Minimum resolution allowed for image'
                 ' (default: screen resolution used)')
    parser.add_argument('--verbose', action='store_true',
            help='Prints addition information to stderr')
    parser.add_argument('--url',
            help='Use image from this URL')

    args = parser.parse_args()

    set_verbose(args.verbose)

    if args.desktop:
        desktops = [d for d in desktops if d.num == args.desktop]

    for desktop in desktops:
        if args.url:
            desktop.image_urls = [args.url]
        if args.min_resolution:
            min_resolution = _parse_min_resolution(args.min_resolution)
            if min_resolution:
                desktop.min_resolution = min_resolution
        if args.subreddits:
            desktop.subreddit_tokens = args.subreddits

def main():
    _clear_download_directory()

    # Configuration override change: defaults -> config-file -> cli-options
    desktops = _get_desktops_with_defaults()
    _read_config_file(desktops)
    _handle_cli_options(desktops)

    for desktop in desktops:
        desktop.set_background()


if __name__ == "__main__":
    main()
