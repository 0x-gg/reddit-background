#!/usr/bin/env python
"""
NAME

    reddit-background

SYNOPSIS

    reddit-backgrounds [--desktop <DESKTOP>] [-h --help] [SUBREDDITS]

DESCRIPTION

    Set Mac OS X desktop backgrounds to images from pulled from Reddit.

EXAMPLES

    reddit-backgrounds CarPorn:top:10:week {seasonal} EarthPorn:new

AUTHOR

    Rick Harris <rconradharris@gmail.com>
"""
import argparse
import datetime
import json
import os
import random
import shutil
import subprocess
import sys
import urllib2
import uuid


DOWNLOAD_DIRECTORY = "~/.background-images"

def _run_apple_script(script):
    return subprocess.check_output(['osascript', '-e', script])


def _set_desktop_background(idx, filename):
    script = 'tell application "System Events" to set picture of item'\
             ' {idx} of (a reference to every desktop) to "{filename}"'\
             .format(idx=idx, filename=filename)
    return _run_apple_script(script)


def _get_number_of_desktops():
    script = 'tell application "System Events" to return count of a'\
             ' reference to every desktop'
    return int(_run_apple_script(script).strip())
    

def _urlopen(url):
    user_agent = "Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11" 
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', user_agent)]
    return opener.open(url)
    

def _download(url, filename):
    response = _urlopen(url)
    try:
        with open(filename, 'w') as f:
            f.write(response.read())
    finally:
        response.close()


def _download_image(image_url):
    dirname = os.path.expanduser(DOWNLOAD_DIRECTORY)
    basename = "%s.jpg" % uuid.uuid4()
    filename = os.path.join(dirname, basename)
    _download(image_url, filename)
    return filename


def _select_and_download_images(image_urls, desktop=0):
    image_urls = image_urls[:]

    random.shuffle(image_urls)

    num_desktops = 1 if desktop else _get_number_of_desktops()

    downloaded = 0
    filenames = []
    for image_url in image_urls:
        if downloaded == num_desktops:
            break

        try:
            filename = _download_image(image_url)
        except urllib2.HTTPError:
            pass  # Try next image...
        else:
            downloaded += 1
            filenames.append(filename)

    return filenames


def _set_desktop_backgrounds(filenames, desktop=0):
    for idx, filename in enumerate(filenames):
        if desktop:
            idx += desktop
        else:
            idx += 1

        _set_desktop_background(idx, filename)


def _clear_download_directory():
    dirname = os.path.expanduser(DOWNLOAD_DIRECTORY)
    if os.path.exists(dirname):
        shutil.rmtree(dirname)
    os.makedirs(dirname)


def _get_northern_hemisphere_season():
    """Source: http://stackoverflow.com/questions/16139306/determine-season-given-timestamp-in-python-using-datetime"""
    day = datetime.date.today().timetuple().tm_yday
    spring = range(80, 172)
    summer = range(172, 264)
    autumn = range(264, 355)
    if day in spring:
      return 'spring'
    elif day in summer:
      return 'summer'
    elif day in autumn:
      return 'autumn'
    else:
      return 'winter'


class Subreddit(object):
    def __init__(self, name, sort='top', limit=25, timeframe='week'):
        self.name = name
        self.sort = sort
        self.limit = limit
        self.timeframe = timeframe

    @staticmethod
    def _fetch_subreddit_data(subreddit, sort, limit, timeframe):
        url = 'http://reddit.com/r/{subreddit}/{sort}.json?t={timeframe}&limit={limit}'
        url = url.format(subreddit=subreddit,
                         sort=sort,
                         timeframe=timeframe,
                         limit=limit)
        response = _urlopen(url)
        try:
            return json.loads(response.read())
        finally:
            response.close()

    @staticmethod
    def _get_image_urls_from_data(data):
        image_urls = []
        for child in data['data']['children']:
            url = child['data']['url']
            if url.endswith('.jpg'):
                image_urls.append(url)
            elif 'imgur.com' in url:
                url += '.jpg'
                image_urls.append(url)

        return image_urls

    def fetch_image_urls(self):
        data = self._fetch_subreddit_data(
                self.name, self.sort, self.limit, self.timeframe)
        return self._get_image_urls_from_data(data)

    @classmethod
    def create_from_token_parts(cls, token_parts):
        args = ('name', 'sort', 'limit', 'timeframe')
        ddict = {}
        for arg, value in zip(args, token_parts):
            ddict[arg] = value
        return cls(**ddict)


def _parse_subreddit_token(token):
    token_parts = token.split(':')

    name = token_parts[0]

    if name == '{seasonal}':
        token_parts[0] = '%sporn' % _get_northern_hemisphere_season()

    return Subreddit.create_from_token_parts(token_parts)


def main():
    parser = argparse.ArgumentParser(
        description='Set desktop background image from reddit')
    parser.add_argument('subreddits', metavar='SUBREDDITS', nargs='*',
                       help='A list of subreddits')
    parser.add_argument('--desktop', type=int, default=0,
            help='Only set background for this desktop'
                 ' (default: Set all desktops)')

    args = parser.parse_args()

    image_urls = []
    for token in args.subreddits:
        subreddit = _parse_subreddit_token(token)
        image_urls.extend(subreddit.fetch_image_urls())

    if not image_urls:
        print >> sys.stderr, "error: No images found"
        sys.exit(1)

    _clear_download_directory()

    filenames = _select_and_download_images(image_urls, desktop=args.desktop)

    _set_desktop_backgrounds(filenames, desktop=args.desktop)


if __name__ == "__main__":
    main()
