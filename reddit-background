#!/usr/bin/env python
"""
NAME

    reddit-background

SYNOPSIS

    reddit-backgrounds [--desktop <DESKTOP>] [-h --help] [SUBREDDITS]

DESCRIPTION

    Set Mac OS X desktop backgrounds to images from pulled from Reddit.

EXAMPLES

    reddit-backgrounds CarPorn:top:10:week {seasonal} EarthPorn:new

AUTHOR

    Rick Harris <rconradharris@gmail.com>
"""
import ConfigParser
import argparse
import collections
import datetime
import json
import os
import random
import re
import shutil
import subprocess
import sys
import urllib2
import urlparse
import uuid


CONFIG_PATH = "~/.reddit-background.conf"
DOWNLOAD_DIRECTORY = "~/.background-images"
RE_RESOLUTION_IN_TITLE = re.compile(".*\[\s*(\d+)\s*[xX]\s*(\d+)\s*\].*")
DEFAULT_MIN_RESOLUTION = '1024x768'
IMAGE_EXTENSIONS = set(['jpg', 'jpeg', 'png'])

VERBOSE = False


def set_verbose(verbose):
    global VERBOSE
    VERBOSE = verbose


def log(msg):
    if VERBOSE:
        print >> sys.stderr, msg


def _run_apple_script(script):
    return subprocess.check_output(['osascript', '-e', script])


def _set_desktop_background(idx, filename):
    log('Setting background for desktop {0}'.format(idx))
    script = 'tell application "System Events" to set picture of item'\
             ' {idx} of (a reference to every desktop) to "{filename}"'\
             .format(idx=idx, filename=filename)
    return _run_apple_script(script)


def _get_number_of_desktops():
    script = 'tell application "System Events" to return count of a'\
             ' reference to every desktop'
    return int(_run_apple_script(script).strip())
    

def _urlopen(url):
    user_agent = "Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11" 
    opener = urllib2.build_opener()
    opener.addheaders = [('User-Agent', user_agent)]
    return opener.open(url)


def _get_extension_from_url(url):
    url_path = urlparse.urlparse(url).path
    parts = url_path.rsplit('.', 1)
    try:
        return parts[1]
    except IndexError:
        return None

def _download_image(image_url):
    dirname = os.path.expanduser(DOWNLOAD_DIRECTORY)

    ext = _get_extension_from_url(image_url)
    assert ext, "No extension found for image!"

    basename = '.'.join([str(uuid.uuid4()), ext])
    filename = os.path.join(dirname, basename)

    log('Downloading {0} to {1}'.format(image_url, filename))
    response = _urlopen(image_url)
    try:
        with open(filename, 'w') as f:
            f.write(response.read())
    finally:
        response.close()

    return filename


def _clear_download_directory():
    dirname = os.path.expanduser(DOWNLOAD_DIRECTORY)
    if os.path.exists(dirname):
        shutil.rmtree(dirname)
    os.makedirs(dirname)


def _get_northern_hemisphere_season():
    """Source: http://stackoverflow.com/questions/16139306/determine-season-given-timestamp-in-python-using-datetime"""
    day = datetime.date.today().timetuple().tm_yday
    spring = range(80, 172)
    summer = range(172, 264)
    autumn = range(264, 355)
    if day in spring:
      return 'spring'
    elif day in summer:
      return 'summer'
    elif day in autumn:
      return 'autumn'
    else:
      return 'winter'


class Desktop(object):
    def __init__(self, num, min_resolution):
        self.num = num
        self.min_resolution = min_resolution
        self.subreddits = []

    def add_subreddit_from_token(self, token):
        subreddit = Subreddit.create_from_token(self, token)
        self.subreddits.append(subreddit)

    def set_background(self):
        # Accumulate images URL across subreddits
        image_urls = []
        for subreddit in self.subreddits:
            urls = subreddit.fetch_image_urls()
            image_urls.extend(urls)

        log('Total candidate images across subreddits: {0}'.format(len(image_urls)))

        # Randomize
        random.shuffle(image_urls)

        # Pick one
        filename = None
        for image_url in image_urls:
            try:
                filename = _download_image(image_url)
                break
            except urllib2.HTTPError:
                continue  # Try next image...

        # If we found one, set the background
        if filename:
            _set_desktop_background(self.num, filename)


class Post(object):
    def __init__(self, subreddit, title, url):
        self.subreddit = subreddit
        self.title = title
        self.url = url

    def meets_resolution_criteria(self):
        min_resolution = self.subreddit.desktop.min_resolution

        if not min_resolution:
            return True

        min_x, min_y = map(int, min_resolution.split('x'))

        match = RE_RESOLUTION_IN_TITLE.match(self.title)

        if not match:
            return False

        resolution_x = int(match.group(1))
        resolution_y = int(match.group(2))

        return resolution_x >= min_x and resolution_y >= min_y

    def fetch_image_url(self):
        url = self.url

        ext = _get_extension_from_url(url)

        if ext in IMAGE_EXTENSIONS:
            return url
        elif 'imgur.com' in url:
            return '{0}.jpg'.format(url)
        else:
            return None


class Subreddit(object):
    def __init__(self, desktop, name, sort='top', limit=25, timeframe='week'):
        self.desktop = desktop
        self.name = name
        self.sort = sort
        self.limit = limit
        self.timeframe = timeframe

    def _fetch_posts(self):
        url = 'http://reddit.com/r/{subreddit}/{sort}.json?t={timeframe}&limit={limit}'
        url = url.format(subreddit=self.name,
                         sort=self.sort,
                         timeframe=self.timeframe,
                         limit=self.limit)

        response = _urlopen(url)

        try:
            data = json.loads(response.read())
        finally:
            response.close()

        posts = []
        for child in data['data']['children']:
            data = child['data']
            post = Post(self, data['title'], data['url'])
            posts.append(post)

        return posts

    def fetch_image_urls(self):
        posts = self._fetch_posts()

        image_urls = []
        for post in posts:
            if post.meets_resolution_criteria():
                image_url = post.fetch_image_url()
                if image_url:
                    image_urls.append(image_url)

        log('Found {0} candidate images from {1}'.format(len(image_urls),
                                                         self.name))
        return image_urls

    @classmethod
    def create_from_token(cls, desktop, token):
        token_parts = token.split(':')

        name = token_parts[0]

        if name == '{seasonal}':
            token_parts[0] = '%sporn' % _get_northern_hemisphere_season()

        args = ('name', 'sort', 'limit', 'timeframe')
        ddict = {}
        for arg, value in zip(args, token_parts):
            ddict[arg] = value
        return cls(desktop, **ddict)

    def __repr__(self):
        return '<Subreddit r/{0}>'.format(self.name)


def _get_desktop_range():
    num_desktops = _get_number_of_desktops()
    return map(lambda x: x + 1, range(num_desktops))


def _read_config_file(desktop_info):
    path = os.path.expanduser(CONFIG_PATH)

    if not os.path.exists(path):
        return

    def parse_subreddit_tokens(info, section):
        tokens = map(lambda x: x.strip(),
                     config.get(section, 'subreddits').split(','))

        if tokens:
            info['subreddit_tokens'] = tokens

    def parse_min_resolution(info, section):
        try:
            min_resolution = config.get(section, 'min_resolution')
        except ConfigParser.NoOptionError:
            pass
        else:
            info['min_resolution'] = min_resolution

    def parse_section(info, section):
        if not info.get('subreddit_tokens'):
            parse_subreddit_tokens(info, section)

        if not info.get('min_resolution'):
            parse_min_resolution(info, section)

    config = ConfigParser.ConfigParser()
    with open(path) as f:
        config.readfp(f)

    for desktop in _get_desktop_range():
        section = 'desktop{0}'.format(desktop)

        if section not in config.sections():
            section = 'default'

        parse_section(desktop_info[desktop], section)


def _handle_cli_options(desktop_info):
    parser = argparse.ArgumentParser(
        description='Set desktop background image from reddit')
    parser.add_argument('subreddits', metavar='SUBREDDITS', nargs='*',
            help='A list of subreddits')
    parser.add_argument('-d', '--desktop', type=int, default=0,
            help='Only set background for this desktop'
                 ' (default: Set all desktops)')
    parser.add_argument('--min-resolution',
            help='Minimum resolution allowed for image'
                 ' (default: 1024x768)')
    parser.add_argument('--verbose', action='store_true',
            help='Prints addition information to stderr')

    args = parser.parse_args()

    set_verbose(args.verbose)

    if args.desktop:
        desktops = [args.desktop]
    else:
        desktops = _get_desktop_range()

    for desktop in desktops:
        info = desktop_info[desktop]

        if args.min_resolution:
            info['min_resolution'] = args.min_resolution

        if args.subreddits:
            info['subreddit_tokens'] = args.subreddits


def _use_defaults(desktop_info):
    for desktop in _get_desktop_range():
        info = desktop_info[desktop]

        if not info.get('subreddit_tokens'):
            # Seasonal seems like a pretty good default
            info['subreddit_tokens'] = ['{seasonal}']

        if not info.get('min_resolution'):
            info['min_resolution'] = DEFAULT_MIN_RESOLUTION


def main():
    desktop_info = collections.defaultdict(dict)

    # Configuration override chain:
    #   CLI options overrides config file
    #   config file overrides defaults
    _handle_cli_options(desktop_info)
    _read_config_file(desktop_info)
    _use_defaults(desktop_info)

    _clear_download_directory()

    for num, info in desktop_info.iteritems():
        desktop = Desktop(num, info['min_resolution'])

        for t in info['subreddit_tokens']:
            desktop.add_subreddit_from_token(t)

        desktop.set_background()


if __name__ == "__main__":
    main()
